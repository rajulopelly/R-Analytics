table(is.na(churn$PaymentMethod))
table(churn$PaymentMethod)
paymentmethod<-factor(churn$PaymentMethod,levels=c("Bank transfer (automatic)","Credit card (automatic)","Electronic check","Mailed check"),labels=c(1,2,3,4))
churn$PaymentMethod<-paymentmethod
is.integer(churn$MonthlyCharges)
class(churn$MonthlyCharges)
range(churn$MonthlyCharges)
table(is.na(churn$MonthlyCharges))
is.integer(churn$TotalCharges)
class(churn$TotalCharges)
range(churn$TotalCharges)
table(is.na(churn$TotalCharges))
mean(churn$TotalCharges,na.rm = TRUE)
churn$TotalCharges[which(is.na(churn$TotalCharges))]<-mean(churn$TotalCharges,na.rm = TRUE)
sum(is.na(churn$TotalCharges))
is.integer(churn$Churn)
class(churn$Churn)
table(is.na(churn$Churn))
table(churn$Churn)
Churn<-factor(churn$Churn,levels=c("Yes","No"),labels = c(1,0))
churn$Churn<-Churn
fix(churn)
library(ResourceSelection)
library(fmsb)
library(ROCR)
library(rpart)
set.seed(100)
a=sample(2,nrow(churn),replace = T,prob = c(0.7,0.3))
train=churn[a==1,]
test=churn[a==2,]
View(train)
View(test)
nrow(train)
nrow(test)
#enter method
log=glm(Churn~.,data=train,family=binomial)
summary(log)
#forward method
log1=step(log,direction="forward")
summary(log1)
#backward method
log2=step(log,direction="backward")
summary(log2)
# Final model fitting
log3=glm(Churn~SeniorCitizen+tenure+MultipleLines+InternetService+OnlineSecurity+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+MonthlyCharges+TotalCharges,data=train,family=binomial)
log4=step(log3,direction="backward")
summary(log4)
guru=predict(log4,newdata=subset(test,select=c(1:19)),type='response')
guru1 <- prediction(guru, test$Churn)
guru2 <- performance(guru1, measure = "tpr", x.measure = "fpr")
plot(guru2)
abline(0,1,lty = 8, col = 'red')
auc=performance(guru1,measure="auc")
auc=auc@y.values[[1]]
auc
#Confusion matrix
y_pred <- ifelse(guru > 0.5, 1 ,0)
cm <- table(test$Churn, y_pred)
cm
#Efficency
Efficency <- sum(diag(cm))/sum(cm)
Efficency
library(readr)
expo(log4)
exp(log4)
exp(log(log4))
logLik(log4)
oddsratio(log4)
library(oddsratio)
install.packages("oddsratio")
library(oddsratio)
oddsratio(log4)
summary(log4)
summary(log4)
oddsratio(log4)
or_glm(log4,data = train)
or_glm(log4,data = train,incr = c(2,5))
exp(2.589e-01)
guru1 <- prediction(guru, test$Churn)
guru1
guru=predict(log4,newdata=subset(test,select=c(1:19)),type='response')
guru
y_pred <- ifelse(guru > 0.5, 1 ,0)
test$score<-guru
View(outbreak)
View(outbreak)
library(readr)
Forbes <- read_csv("C:/Users/Unitech1/Desktop/questions/Forbes.csv")
View(Forbes)
names(Forbes)
sapply(Forbes,class)
library(dplyr)
library(dplyr)
library(arulesViz)
install.packages("arulesViz")
library(arulesViz)
library(arules)
library(datasets)
data(Groceries)
library(arulesViz)
library(arules)
library(datasets)
data(Groceries)
itemFrequencyPlot(Groceries,topN=20,type="absolute")
itemFrequencyPlot(Groceries,topN=30,type="absolute")
itemFrequencyPlot(Groceries,topN=10,type="absolute")
itemFrequencyPlot(Groceries,topN=20,type="absolute")
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8))
options(digits=2)
inspect(rules[1:5])
rules<-sort(rules, by="confidence", decreasing=TRUE)
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8,maxlen=3))
subset.matrix <- is.subset(rules, rules)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
rules.pruned <- rules[!redundant]
rules<-rules.pruned
rules<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
library(arulesViz)
plot(rules,method="graph","interactive"="TRUE",shading="NA")
library(arulesViz)
plot(rules,method="graph","interactive"="TRUE",shading="NA")
install.packages("arulesViz")
plot(rules,method="graph","interactive"="TRUE",shading="NA")
library(arulesViz)
install.packages("viridisLite")
library(arulesViz)
plot(rules,method="graph","interactive"="TRUE",shading="NA")
plot(rules,method="graph","interactive"="TRUE",engine = "interactive",shading="NA")
plot(rules,method="graph","interactive"="TRUE",engine = "interactive",shading="NA")
library(readr)
outbreak <- read_csv("C:/Users/Unitech1/Desktop/questions/outbreak.csv")
View(outbreak)
names(outbreak)
class(outbreak)
str(outbreak)
is.na(outbreak$age)
is.numeric(outbreak$age)
class(outbreak$age)
levels(outbreak$age)
levels(outbreak$age) [levels(outbreak$age)=="seven"] <-"7"
levels(outbreak$age) [levels(outbreak$age)=="622"] <-"62"
outbreak$age
range(outbreak$age)
outbreak$age <- as.numeric(outbreak$age)
class(outbreak$age)
range(outbreak$age)
plot(outbreak$age)
levels(outbreak$age) [levels(outbreak$age)=="seven"] <-"7"
o <- as.numeric(outbreak$age)
range(outbreak$age)
plot(outbreak$age)
outbreak$age[which(is.na(outbreak$age))]<-62
plot(outbreak$age)
hist(outbreak$age)
library(readr)
outbreak <- read.csv("C:\\Users\\Unitech1\\Desktop\\excel\\outbreak.csv")
View(outbreak)
is.na(outbreak)
table(is.na(outbreak))
sum(is.na(outbreak))
is.numeric(outbreak$age)
class(outbreak$age)
outbreak$age
na.omit(outbreak)
outbreak1=na.omit(outbreak)
outbreak1
mean(outbreak1$age)
outbreak1$age<- as.numeric(outbreak$age)
outbreak1$age<- as.numeric(outbreak1$age)
outbreak1$age
class(outbreak1$age)
mean(outbreak1$age)
range(outbreak1$age)
library(readr)
cap <- read_csv("C:/Users/Unitech1/Desktop/excel/cap.csv")
View(cap)
class(cap$Age)
a <- as.factor(cap$Age)
library(readr)
outbreak <- read_csv("C:/Users/Unitech1/Desktop/excel/outbreak.csv")
View(outbreak)
outbreak$age[22]<- "7"
fix(outbreak)
class(outbreak$age)
range(outbreak$age)
fix(outbreak)
library(readr)
Tel <- read.csv("C:/Users/Unitech1/Desktop/telecom.csv")
View(TelcoCustomerChurn)
churn=subset(Tel ,select = c("gender","SeniorCitizen","Partner","Dependents","tenure","PhoneService","MultipleLines","InternetService","OnlineSecurity","OnlineBackup","DeviceProtection","TechSupport","StreamingTV","StreamingMovies","Contract","PaperlessBilling","PaymentMethod","MonthlyCharges","TotalCharges","Churn"))
View(churn)
names(churn)
nrow(churn)
ncol(churn)
table(is.na(churn))
sum(is.na(churn))
table(is.na(churn$gender))
is.numeric(churn$gender)
class(churn$gender)
table(churn$gender)
Gender <- factor(churn$gender, levels = c("Female", "Male"), labels = c(0,1))
is.factor(Gender)
table(Gender)
churn$gender<-Gender
is.numeric(churn$SeniorCitizen)
class(churn$SeniorCitizen)
table(churn$SeniorCitizen)
sum(is.na(churn$SeniorCitizen))
range(churn$SeniorCitizen)
is.numeric(churn$Partner)
class(churn$Partner)
is.integer(churn$Partner)
table(is.na(churn$Partner))
table(churn$Partner)
partner<-factor(churn$Partner,levels=c("Yes","No"),labels = c(1,0))
churn$Partner<-partner
is.numeric(churn$Dependents)
class(churn$Dependents)
is.integer(churn$Dependents)
table(is.na(churn$Dependents))
table(churn$Dependents)
dependents<-factor(churn$Dependents,levels=c("Yes","No"),labels=c(1,0))
churn$Dependents<-dependents
is.integer(churn$tenure)
class(churn$tenure)
range(churn$tenure)
table(is.na(churn$tenure))
is.numeric(churn$PhoneService)
class(churn$PhoneService)
is.factor(churn$PhoneService)
table(is.na(churn$PhoneService))
table(churn$PhoneService)
phoneservice<-factor(churn$PhoneService,levels=c("Yes","No"),labels = c(1,0))
churn$PhoneService<-phoneservice
is.integer(churn$MultipleLines)
class(churn$MultipleLines)
table(is.na(churn$MultipleLines))
table(churn$MultipleLines)
multiplelines<-factor(churn$MultipleLines,levels = c("Yes","No","No phone service"),labels = c(1,0,2))
churn$MultipleLines<-multiplelines
is.numeric(churn$InternetService)
class(churn$InternetService)
table(is.na(churn$InternetService))
table(churn$InternetService)
internetservice<-factor(churn$InternetService,levels=c("DSL","Fiber optic","No"),labels=c(1,2,0))
churn$InternetService<-internetservice
is.integer(churn$OnlineSecurity)
class(churn$OnlineSecurity)
table(is.na(churn$OnlineSecurity))
table(churn$OnlineSecurity)
onlinesecurity<-factor(churn$OnlineSecurity,levels=c("Yes","No","No internet service"),labels = c(1,0,2))
churn$OnlineSecurity<-onlinesecurity
is.numeric(churn$OnlineBackup)
class(churn$OnlineBackup)
table(is.na(churn$OnlineBackup))
table(churn$OnlineBackup)
onlinebackup<-factor(churn$OnlineBackup,levels=c("Yes","No","No internet service"),labels = c(1,0,2))
churn$OnlineBackup<-onlinebackup
is.integer(churn$DeviceProtection)
class(churn$DeviceProtection)
table(is.na(churn$DeviceProtection))
table(churn$DeviceProtection)
deviceprotection<-factor(churn$DeviceProtection,levels = c("Yes","No internet service","No"),labels = c(1,2,0))
churn$DeviceProtection<-deviceprotection
is.integer(churn$TechSupport)
class(churn$TechSupport)
table(is.na(churn$TechSupport))
table(churn$TechSupport)
techsupport<-factor(churn$TechSupport,levels = c("Yes","No","No internet service"),labels = c(1,0,2))
churn$TechSupport<-techsupport
is.integer(churn$StreamingTV)
class(churn$StreamingTV)
table(is.na(churn$StreamingTV))
table(churn$StreamingTV)
streamingtv<-factor(churn$StreamingTV,levels = c("Yes","No","No internet service"),labels = c(1,0,2))
streamingtv
view(streamingtv)
churn$StreamingTV<-streamingtv
is.numeric(churn$StreamingMovies)
class(churn$StreamingMovies)
sum(is.na(churn$StreamingMovies))
table(churn$StreamingMovies)
streamingmovies<-factor(churn$StreamingMovies,levels = c("Yes","No","No internet service"),labels = c(1,0,2))
churn$StreamingMovies<-streamingmovies
is.integer(churn$Contract)
class(churn$Contract)
table(is.na(churn$Contract))
table(churn$Contract)
contract<-factor(churn$Contract,levels=c("Month-to-month","One year","Two year"),labels=c(1,2,3))
churn$Contract<-contract
is.integer(churn$PaperlessBilling)
class(churn$PaperlessBilling)
sum(is.na(churn$PaperlessBilling))
table(churn$PaperlessBilling)
paperlessbilling<-factor(churn$PaperlessBilling,levels=c("Yes","No"),labels = c(1,0))
churn$PaperlessBilling<-paperlessbilling
is.integer(churn$PaymentMethod)
class(churn$PaymentMethod)
table(is.na(churn$PaymentMethod))
table(churn$PaymentMethod)
paymentmethod<-factor(churn$PaymentMethod,levels=c("Bank transfer (automatic)","Credit card (automatic)","Electronic check","Mailed check"),labels=c(1,2,3,4))
churn$PaymentMethod<-paymentmethod
is.integer(churn$MonthlyCharges)
class(churn$MonthlyCharges)
range(churn$MonthlyCharges)
table(is.na(churn$MonthlyCharges))
is.integer(churn$TotalCharges)
class(churn$TotalCharges)
range(churn$TotalCharges)
table(is.na(churn$TotalCharges))
mean(churn$TotalCharges,na.rm = TRUE)
churn$TotalCharges[which(is.na(churn$TotalCharges))]<-mean(churn$TotalCharges,na.rm = TRUE)
sum(is.na(churn$TotalCharges))
is.integer(churn$Churn)
class(churn$Churn)
table(is.na(churn$Churn))
table(churn$Churn)
Churn<-factor(churn$Churn,levels=c("Yes","No"),labels = c(1,0))
churn$Churn<-Churn
fix(churn)
library(ResourceSelection)
library(fmsb)
library(ROCR)
library(rpart)
set.seed(100)
a=sample(2,nrow(churn),replace = T,prob = c(0.7,0.3))
train=churn[a==1,]
test=churn[a==2,]
View(train)
View(test)
nrow(train)
nrow(test)
#enter method
log=glm(Churn~.,data=train,family=binomial)
summary(log)
#forward method
log1=step(log,direction="forward")
summary(log1)
#backward method
log2=step(log,direction="backward")
library(readr)
Forbes <- read_csv("C:/Users/Unitech1/Desktop/questions/Forbes.csv")
View(Forbes)
names(Forbes)
library(dplyr)
glimpse(Forbes)
sapply(Forbes,class)
class(Forbes$Rank)
rank<-gsub("[#]","",Forbes$Rank)
r<-as.numeric(rank)
Forbes$Rank<-r
class(Forbes$`Brand Value`)
brandval<-gsub("[$]","",Forbes$`Brand Value`)
brandval1<-gsub("[B]","",brandval)
b<-as.numeric(brandval1)
Forbes$`Brand Value`<-b
class(Forbes$`1-Yr Value Change`)
vchange<-gsub("[%]","",Forbes$`1-Yr Value Change`)
v<-as.numeric(vchange)
Forbes$`1-Yr Value Change`<-v
class(Forbes$`Brand Revenue`)
brdrev<-gsub("[$]","",Forbes$`Brand Revenue`)
brde<-gsub("[B]","",brdrev)
br<-as.numeric(brde)
Forbes$`Brand Revenue`<-br
class(Forbes$`Company Advertising`)
index<-which(grepl("M",Forbes$`Company Advertising`))
ca<-gsub("[$]","",Forbes$`Company Advertising`)
ca1<-gsub("[B]","",ca)
ca2<-gsub("[M]","",ca1)
ca3<-as.numeric(ca2)
Forbes$`Company Advertising`<-ca3
Forbes$`Company Advertising`[index]<-Forbes$`Company Advertising`[index]/1000
mean(Forbes$`Company Advertising`,na.rm = T)
Forbes$`Company Advertising`[is.na(Forbes$`Company Advertising`)]<-2.2040
plot(Forbes$`Company Advertising`)
sum(is.na(Forbes$`Company Advertising`))
Tech<-filter(Forbes,Forbes$Industry=="Technology")
lux<-filter(Forbes,Forbes$Industry=="Luxury")
auto<-filter(Forbes,Forbes$Industry=="Automotive")
library(ggplot2)
tech<-ggplot(Tech,aes(x=`Company Advertising`,y=`Brand Revenue` ,label=Brand))
tech + geom_point(aes(size=`Brand Value`,color=Brand)) + geom_text() + xlab("Company Advertising in Billions of $") +
ylab("Brand Revenue in Billions of $") + ggtitle("Technology")+scale_size_continuous(name="Brand Value $(Billions)",breaks=c(30,60,100))+guides(color=F)+
theme(panel.grid.major=element_line("grey")) + theme_bw() +
theme(panel.border=element_rect(color="grey",fill=NA)) + theme(plot.title=element_text(size=50)) +
theme(plot.title=element_text(face="bold"))+ theme(panel.grid.minor=element_line("grey"))
library(readr)
outbreak <- read.csv("c:/users/unitech1/desktop/outbreak.csv")
View(outbreak)
names(outbreak)
sapply(outbreak,class)
str(outbreak)
is.na(outbreak$age)
data("iris")
View(iris)
names(iris)
head(iris)
tail(iris)
V <- data.frame(iris)
View(V)
A<-subset(iris,Species=="setosa")
View(A)
barplot(iris$Sepal.Length)
library(ggplot2)
ggplot(iris,aes(x=Sepal.Length , y=Petal.Length)) + geom_point()
ggplot(iris , aes(x=Sepal.Length , y=Petal.Length)) + geom_point(aes(colour = Species))
###density plot
vol <- ggplot(data=iris, aes(x = Sepal.Length))
vol + stat_density(aes(ymax = ..density..,  ymin = -..density..,
fill = Species, color = Species),
geom = "ribbon", position = "identity") +
facet_grid(. ~ Species) + coord_flip() + xlab("Sepal Length")
###heat map
library(ggplot2)
library(reshape2)
dat <- iris[,1:4]
cor <- melt(cor(dat ,use = "p"))
head(cor)
heat <- ggplot(data=cor, aes(x=Var1, y=Var2, fill=value))
heat + geom_tile() + labs(x = "", y = "") + scale_fill_gradient2(limits=c(-1, 1))
library(readxl)
data1<-read_excel("C:\\Users\\Unitech1\\Downloads\\ICSX_data.xlsx")
head(data1)
data1<-read_excel("C:\\Users\\Unitech1\\Downloads\\ICSX_data.xlsx",sheet = "Data_original")
data1<-read_excel("C:\\Users\\Unitech1\\Downloads\\ICSX_data.xlsx",sheet = Data_original)
data1<-read_excel("C:\\Users\\Unitech1\\Downloads\\ICSX_data.xlsx" sheet = Data_original)
data1<-read_excel("C:\\Users\\Unitech1\\Downloads\\ICSX_data.xlsx" sheet = "Data_original")
data1<-read_excel("C:\\Users\\Unitech1\\Downloads\\ICSX_data.xlsx", sheet = Data_original)
data1<-read_excel("C:\\Users\\Unitech1\\Downloads\\ICSX_data.xlsx", sheet = "Data_original")
library(readxl)
data1<-read_excel("C:\\Users\\Unitech1\\Downloads\\ICSX_data.xlsx", sheet = "Data_original")
head(data1)
sapply(data1,class)
set.seed(100)
train<-sample_frac(data1,0.7)
library(dplyr)
train<-sample_frac(data1,0.7)
str(data1)
print(factor(f))
ac=dist(iris)
factor(f)
f<-c(1,2,3,4,5,7,8)
factor(f)
f<-c(1,2,3,4,5,4,7,2,4,5,3,8,7,8)
factor(f)
rm(f)
f
?clusplot
?aggregate
data("mtcars")
View(mtcars)
is.na(mtcars)
sum(is.na(mtcars))
a=sample(nrow(mtcars),22)
train=mtcars[,-a]
test=mtcars[a,]
nrow(train)
fix=kmeans(mtcars,3)
fix
fix$withinss
fix$betweenss
fix$size
plot(mtcars,col=fix$cluster,pch=15)
points(fix$centers,col=1:11,pch=3)
library(cluster)
ab <- daisy(mtcars)
ac <- ab^2
sk2   <- silhouette(fix$cl, ac)
plot(sk2)
d <- dist(mtcars) # distance matrix
library(fpc)
points(fix$centers,col=1 , pch=5)
cluster.stats(d, fix$cluster)
plotcluster(mtcars,fix$cluster)
mtcars <- data.frame(mtcars, fix$cluster)
aggregate(mtcars,by=list(fix$cluster),FUN=mean)
head(mtcars)
library(cluster)
clusplot(mtcars, fix$cluster,
color=TRUE, shade=TRUE,
labels=2, lines=0)
nrow(train)
fix=kmeans(mtcars,3)
fix
fix$withinss
fix$betweenss
fix$size
plot(mtcars,col=fix$cluster,pch=15)
plot(mtcars,col=fix$cluster,pch=15)
plot(mtcars,col=fix$cluster,pch=15)
points(fix$centers,col=1:11,pch=3)
fix$cluster
fix$totss
fix$iter
fix$ifault
fix$tot.withinss
plot(mtcars,col=fix$cluster,pch=15)
points(fix$centers,col=1:11,pch=3)
fix$tot.withinss
plot(mtcars,col=fix$cluster,pch=15)
points(fix$centers,col=1:11,pch=3)
plot(mtcars,col=fix$cluster,pch=8)
plot(mtcars,col=fix$cluster,pch=15)
points(fix$centers,col=1:11,pch=8)
